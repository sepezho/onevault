#include "imports/stdlib.fc";


global int vault_balance;
global slice admin;

() load_data() impure {
    var ds = get_data().begin_parse();

    vault_balance = ds~load_uint(64);
    admin = ds~load_msg_addr();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(vault_balance, 64)
            .end_cell()
    );
}

const int jetton_op::transfer = 0x0f8a7ea5;
const int jetton_op::transfer_notification = 0x7362d09c;
const int jetton_op::excesses = 0xd53276db;

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }


    slice sender_address = cs~load_msg_addr();
    var (wc, addr_hash) = parse_std_addr(sender_address);

    load_data();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    
    if (op == jetton_op::transfer_notification) {
      int jetton_amount = in_msg_body~load_coins(); 
      slice initial_sender = in_msg_body~load_msg_addr();
      int load_ref = in_msg_body~load_int(1);
      if (load_ref) {
        in_msg_body = in_msg_body.preload_ref().begin_parse();
      }
	    slice usdt0_oft_addr = in_msg_body~load_msg_addr();
      cell body = in_msg_body~load_ref();
      
      vault_balance += jetton_amount;

      ;;todo add check that sender addr is usdt my jetton wallet addr
      ;;todo add check for gas fees
      ;;todo check why there is two body in jetton msg
      ;;todo not specify jw as sender_address and load it from the store 
      ;;todo store usdt0_oft_addr  in config in store
      ;;todo add admin that will be able to manage vault
      ;;todo tests
      ;;todo create usdt0 oft send to lz body creation on fc sc here (not on fe side not in recv message)

      ;;todo mint some jetton representing position to user wallet 
	    
      send_message(
	    	sender_address ,
	    	0,
	    	begin_cell()
	    	.store_op_code(jetton_op::transfer)
	    	.store_query_id(query_id)
	    	.store_grams(jetton_amount) ;; jetton amount
	    	.store_slice(usdt0_oft_addr) ;; new owner
	    	.store_slice(initial_sender) ;; response_destination -> refund excess fees to the owner
	    	.store_maybe_ref(body) ;; custom_response_payload
	    	.store_grams(200000000) ;; 0.2 ;; minimum nano-TON amount to send transfer_notification
	    	;;.store_bool(false) ;; forward_payload
	    	.store_maybe_ref(body) ;; custom_response_payload
	    	.end_cell(),
	      64
      );

      save_data();
      return();
    } else {
      throw_unless(0x666, slice_data_equal?(sender_address, admin));
      set_code(in_msg_body~load_ref()); ;; with this i will be able to fix all shit on my sc
      save_data();
      return();
    }

    throw(0xffff);
}

(int, slice) get_all() method_id {
    load_data();
    return (vault_balance, admin);
}
